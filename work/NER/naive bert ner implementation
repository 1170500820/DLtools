naive bert ner implementation

通过span来预测ner，采用经典的span start + end方案
后面需要修改，也不得不修改

(hybrids)

model:
	input:
		(train)
		- input_ids  (bsz, seq_l)
		- token_type_ids  (bsz, seq_l)
		- attention_mask  (bsz, seq_l)
	output:
		(train)
		- ner_result  (bsz, seq_l, ner_cnt)
		- sentiment  (bsz, sent_cnt)

loss
	input:
		(train)
		- ner_result  (bsz, seq_l, ner_cnt)
		- sentiment  (bsz, sent_cnt)
		- ner_target  (bsz, seq_l)
		- sentiment_target  (bsz)
	output:
		loss

evaluator
	input:
		- ner_result  (bsz, seq_l, ner_cnt)
		- ner_string_gt  List[str]
		- sentiment  (bsz, sent_cnt)
		- sentiment_gt  int
	output:
		- scores

evaluator


dataset

	[text, BIO_anno, class]
			|
		tokenize (fast)
			|
			V
	[text, input_ids, token_type_ids, attention_mask, offset_mappings, BIO_anno, class]
			|
		generate ner label
			|
			V
	[text, input_ids, token_type_ids, attention_mask, offset_mappings, BIO_anno, BIO_anno_token, class]
			|
		convert ner label to tensor
			|
			V
	[text, input_ids, token_type_ids, attention_mask, offset_mappings, BIO_anno, BIO_anno_token, ner_target, class]
			|
		convert sentiment label to tensor
			|
			V
	[text, input_ids, token_type_ids, attention_mask, offset_mappings, BIO_anno, BIO_anno_token, class, snetiment_target]


